{"version":3,"sources":["pieces.tsx","App.tsx","solver.tsx","index.tsx"],"names":["PIECES","COLORS","App","UbongoRenderer","id","React","Component","whiteMaterial","THREE","color","solidLineMaterial","boardLinesGeometry","vertices","push","boardBoxGeometry","pieceObjects","blockGeometry","computeBoundingBox","size","boundingBox","getSize","map","packedGeo","pieceIndex","objectMaterial","length","roughness","geo","forEach","row","y","piece","x","z","thisGeo","clone","translate","mergeMesh","mergeVertices","mesh","receiveShadow","castShadow","computePieceObjects","overlayContainer","document","getElementById","camera","window","innerWidth","innerHeight","scene","renderer","antialias","state","raycaster","mouse","lastHoverTarget","buttonCallback","boardGroup","selectedBoard","selectPiecesGroup","solveResult","solvePiecesGroup","mouseDown","controls","renderFrame","selectBoard","maxOpacity","children","obj","material","opacity","Math","max","updateMatrixWorld","i","floor","viewObj","translateX","translateY","translateZ","transparent","add","numberInput","createElement","type","value","min","appendChild","widthHalf","heightHalf","screenPos","position","project","style","dataset","toString","left","round","top","scheduleFrame","selectPieces","querySelectorAll","input","curOpacity","Number","newOpacity","remove","Array","from","parentElement","removeChild","filter","c","yIndex","xIndex","maxLen","minOpacity","targetPos","solveStartPosition","sub","clampLength","rotateX","rotateY","OrbitControls","getElementsByTagName","target","update","hasMoved","handledIndices","rotation","solvedPiece","userData","finalState","finalPosition","targetRotation","steps","rotateOnWorldAxis","PI","calculateTotalRotation","rotations","toVector3","rotationVec","ANIM_SPEED","setFromVector3","render","setText","setButton","_","isRayCastTarget","groupBy","values","sortBy","objArray","setFromCamera","intersects","intersectObjects","object","pieceIndices","flatMap","times","parseInt","constant","flatBoard","flatten","t","console","log","solverPieces","originalIndex","result","depth","blocks","dX","dY","dZ","toSolverPiece","solverPiece","width","height","board","pieces","Error","startTime","performance","now","rotateWithFunc","f","concat","b","rotateZ","canonize","minx","MAX_VALUE","miny","minz","sort","a","dx","dy","dz","setAdd","permutation","permutations","match","j","p1","p2","rotatedPieces","curPermutations","k","l","generatePermutations","isFree","setFree","val","canPlacePiece","placePiece","unplacePiece","placedPieces","solveBoard","piecesLeft","cloneDeep","res","slice","pop","realResult","placedPiece","sum","block","solve","p","cloned","find","setHex","alert","lookAt","hasScheduled","requestAnimationFrame","scheduled","lastText","text","innerText","callback","button","visibility","this","shadowMap","enabled","setSize","body","domElement","addEventListener","ev","clientX","clientY","selected","boardPiece","boardPieceTarget","light","set","shadow","mapSize","bias","near","radius","ambientLight","intensity","ReactDOM"],"mappings":"0TA2EaA,EAAS,CAzEP,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,IAGS,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,IAGW,CACf,CAAC,EAAG,GACJ,CAAC,EAAG,IAGS,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAkDU,CACd,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAjDM,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGM,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAGS,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAGS,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGM,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGM,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGO,CACd,CAAC,EAAG,GACJ,CAAC,EAAG,IAGU,CACd,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGO,CACd,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAyBIC,EAAS,CAAC,QAAU,QAAU,SAAU,U,uBCpF/CC,E,4LAEF,IAAIC,I,+BAGJ,OACE,yBAAKC,GAAG,qBACN,yBAAKA,GAAG,mBACR,yBAAKA,GAAG,gB,GAREC,IAAMC,WAclBC,EAAgB,IAAIC,IAAwB,CAAEC,MAAO,WACrDC,EAAoB,IAAIF,IAAwB,CAAEC,MAAO,WAEzDE,EAAqB,IAAIH,IAC/BG,EAAmBC,SAASC,KAAK,IAAIL,IAAc,EAAG,EAAG,IACzDG,EAAmBC,SAASC,KAAK,IAAIL,IAAc,GAAK,EAAG,IAC3DG,EAAmBC,SAASC,KAAK,IAAIL,IAAc,GAAK,GAAK,IAC7DG,EAAmBC,SAASC,KAAK,IAAIL,IAAc,EAAK,GAAK,IAC7DG,EAAmBC,SAASC,KAAK,IAAIL,IAAc,EAAG,EAAG,IAEzD,IAAMM,EAAmB,IAAIN,IAAkB,GAAK,GAAK,MAEnDO,ED4DC,SACLC,GAEAA,EAAcC,qBACd,IAAMC,EAAO,IAAIV,IAEjB,OADAQ,EAAcG,YAAYC,QAAQF,GAC3BlB,EAAOqB,KAAI,SAACC,EAAWC,GAC5B,IAAMC,EAAiB,IAAIhB,IAA2B,CACpDC,MAAOR,EAAOsB,EAAatB,EAAOwB,QAClCC,UAAW,KAEPC,EAAM,IAAInB,IAChBc,EAAUM,SAAQ,SAACC,EAAKC,GACtBD,EAAID,SAAQ,SAACG,EAAOC,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC9B,IAAMC,EAAUlB,EAAcmB,QAC9BD,EAAQE,UAAUJ,EAAId,EAAKc,EAAGF,EAAIZ,EAAKY,EAAGG,EAAIf,EAAKe,GACnDN,EAAIU,UAAU,IAAI7B,IAAW0B,IAC7BP,EAAIW,uBAIVX,EAAIW,gBACJ,IAAMC,EAAO,IAAI/B,IAAWmB,EAAKH,GAIjC,OAHAe,EAAKC,eAAgB,EACrBD,EAAKE,YAAa,EAEXF,KCvFUG,CADC,IAAIlC,IAAkB,GAAK,GAAK,KAShDL,EAsBJ,aAAe,IAAD,gCArBNwC,iBAAmBC,SAASC,eAAe,qBAqBrC,KApBNC,OAAS,IAAItC,IACnB,GACAuC,OAAOC,WAAaD,OAAOE,YAC3B,IACA,KAgBY,KAdNC,MAAQ,IAAI1C,IAcN,KAbN2C,SAAW,IAAI3C,IAAoB,CAAE4C,WAAW,IAa1C,KAZNC,MAAQ,EAYF,KAXNC,UAAY,IAAI9C,IAWV,KAVN+C,MAAQ,IAAI/C,IAUN,KATNgD,gBAAyC,KASnC,KARNC,eAAiB,aAQX,KAPNC,WAAa,IAAIlD,IAOX,KANNmD,cAA6B,GAMvB,KALNC,kBAAoB,IAAIpD,IAKlB,KAJNqD,YAA6B,GAIvB,KAHNC,iBAAmB,IAAItD,IAGjB,KAFNuD,WAAY,EAEN,KADNC,SAAiC,KAC3B,KA6EdC,YAAc,WACZ,GAAmB,IAAf,EAAKZ,MACP,EAAKa,mBACA,GAAmB,IAAf,EAAKb,MAAa,CAC3B,IAAIc,EAAa,EACjB,EAAKT,WAAWU,SAASxC,SAAQ,SAACyC,GAChCA,EAAIC,SAASC,QAAUC,KAAKC,IAAIJ,EAAIC,SAASC,QA5GlC,KA4GwD,GAC/DF,EAAIC,SAASC,QAAUJ,IACzBA,EAAaE,EAAIC,SAASC,YAGX,IAAfJ,IACF,EAAKd,MAAQ,EACb,EAAKP,OAAO4B,oBACZ3D,EAAaa,SAAQ,SAACyC,EAAKM,GACzB,IAAM3C,EAAI2C,EAtHG,EAuHP7C,EAAI0C,KAAKI,MAAMD,EAvHR,GAwHPE,EAAUR,EAAIlC,QACpB0C,EAAQC,WAAsB,KAAT,EAAI9C,IACzB6C,EAAQE,WAAW,GAAU,IAAJjD,GACzB+C,EAAQG,YAAY,IACpBH,EAAQrC,eAAgB,EACxBqC,EAAQpC,YAAa,EACpBoC,EAAgBP,SAASW,aAAc,EACvCJ,EAAgBtD,WAAaoD,EAC9B,EAAKf,kBAAkBsB,IAAIL,GAE3B,IAAMM,EAAcvC,SAASwC,cAAc,SAC3CD,EAAYE,KAAO,SACnBF,EAAYG,MAAQ,IACpBH,EAAYI,IAAM,IAClB,EAAK5C,iBAAiB6C,YAAYL,GAElC,IAAMM,EAAY1C,OAAOC,WAAa,EACpC0C,EAAa3C,OAAOE,YAAc,EAC9B0C,EAAYd,EAAQe,SAASzD,QACnCwD,EAAU7D,GAAK,GACf6D,EAAUE,QAAQ,EAAK/C,QACvBqC,EAAYW,MAAMvB,QAAU,IAC5BY,EAAYY,QAAQxE,WAAaoD,EAAEqB,WACnCb,EAAYW,MAAMG,KAAlB,UAA4BzB,KAAK0B,MAC/BP,EAAU3D,EAAIyD,EAAYA,GAD5B,MAGAN,EAAYW,MAAMK,IAAlB,UAA2B3B,KAAK0B,OAC5BP,EAAU7D,EAAI4D,EAAcA,GADhC,SAIF,EAAKxC,MAAMgC,IAAI,EAAKtB,oBAEtB,EAAKwC,qBACA,GAAmB,IAAf,EAAK/C,MACd,EAAKgD,oBACA,GAAmB,IAAf,EAAKhD,MAAa,CAC3B,IAAIc,EAAa,EAWjB,GAVAvB,SAAS0D,iBAAiB,SAAS1E,SAAQ,SAAA2E,GACzC,IAAMC,EAAaC,OAAOF,EAAMT,MAAMvB,SAChCmC,EAAalC,KAAKC,IAAI+B,EA9JjB,KA8J0C,GACrDD,EAAMT,MAAMvB,QAAUmC,EAAWV,WACjC7B,EAAaK,KAAKC,IAAIiC,EAAYvC,MAEpC,EAAKP,kBAAkBQ,SAASxC,SAAQ,SAACyC,EAAUM,GACjDN,EAAIC,SAASC,QAAUC,KAAKC,IAAIJ,EAAIC,SAASC,QAnKlC,KAmKwD,GACnEJ,EAAaK,KAAKC,IAAIJ,EAAIC,SAASC,QAASJ,MAE3B,IAAfA,EACF,EAAKjB,MAAMyD,OAAO,EAAK/C,mBACvBgD,MAAMC,KAAKjE,SAAS0D,iBAAiB,UAAU1E,SAAQ,SAAA2E,GAAU,IAAD,EAC9D,UAAAA,EAAMO,qBAAN,SAAqBC,YAAYR,MAGV,EAAK7C,WAAWU,SAAS4C,QAAO,SAAAC,GACvD,QAAMA,aAAazG,OAGX,EAAKmD,cAAesD,EAAUC,QAASD,EAAUE,WAE1CvF,SAAQ,SAAAqF,GACvB,EAAKvD,WAAWiD,OAAOM,MAEzB,EAAKvD,WAAWsB,YAAY,IAC5B,EAAK3B,MAAQ,EAEf,EAAK+C,qBACA,GAAmB,IAAf,EAAK/C,MAAa,CAC3B,IAAI+D,EAAS,EACTC,EAAa,EACjB,EAAKvD,iBAAiBM,SAASxC,SAAQ,SAACyC,EAAKM,GAC3C,IAAM2C,EAAYC,EAAmB5C,GACrC2C,EAAUE,IAAInD,EAAIuB,UAClB0B,EAAUG,YAAY,EA9LN,KA+LZH,EAAU7F,SAAW2F,IACvBA,EAASE,EAAU7F,UAErB4C,EAAIuB,SAASV,IAAIoC,GACjBjD,EAAIqD,QAAQ,MACZrD,EAAIsD,QAAQ,UAEd,EAAKjE,WAAWU,SAASxC,SAAQ,SAACyC,GAChCA,EAAIC,SAASC,QAAUC,KAAKe,IAAIlB,EAAIC,SAASC,QAxMlC,KAwMwD,GAC/DF,EAAIC,SAASC,QAAU8C,IACzBA,EAAahD,EAAIC,SAAS+C,eAG1BD,GAAU,MAAwB,IAAfC,IACrB,EAAKrD,SAAW,IAAI4D,IAClB,EAAK9E,OACLF,SAASiF,qBAAqB,QAAQ,IAKxC,EAAK7D,SAAS8D,OAAS,IAAItH,IAAc,EAAG,GAAI,IAChD,EAAK6C,MAAQ,GAEf,EAAK+C,qBACA,GAAmB,IAAf,EAAK/C,MAAa,CAAC,IAAD,EAC3B,YAAKW,gBAAL,SAAe+D,SACf,IAAIC,GAAW,EACXC,EAAiB,EACrB,EAAKnE,iBAAiBM,SAASxC,SAAQ,SAACyC,EAAKM,GAC3C,GAAIqD,EAAU,CACZ3D,EAAI6D,SAASlG,GAAK,KAClBqC,EAAI6D,SAASpG,GAAK,MAClB,IAAMwF,EAAYC,EAAmB5C,EAAIsD,GACzCX,EAAUE,IAAInD,EAAIuB,UAClB0B,EAAUG,YAAY,EAlOR,KAmOVH,EAAU7F,SAAW,MACvB4C,EAAIuB,SAASV,IAAIoC,OAEd,CACLW,GAAkB,EAClB,IAAME,EAAc,EAAKtE,YAAYc,GACrC,GAAgC,IAA5BN,EAAI+D,SAASC,WAAkB,CACjChE,EAAI6D,SAASlG,GAAK,KAClBqC,EAAI6D,SAASpG,GAAK,MAClB,IAAMwF,EAAYgB,EAAcH,GAChCb,EAAUrF,GAAK,GACfqF,EAAUE,IAAInD,EAAIuB,UAClB0B,EAAUG,YAAY,EA/OV,KAgPRH,EAAU7F,SAAW,MACvB4C,EAAIuB,SAASV,IAAIoC,GACjBU,GAAW,GAEX3D,EAAI+D,SAASC,WAAa,EAG9B,GAAgC,IAA5BhE,EAAI+D,SAASC,WAAkB,CACjC,IAAME,EAiMlB,SAAgCC,GAC9B,IAAMnE,EAAM,IAAI7D,IAmBhB,OAlBAgI,EAAM5G,SAAQ,SAAAsG,GACK,MAAbA,EACF7D,EAAIoE,kBACF,IAAIjI,IAAc,EAAG,EAAG,GACV,EAAIgE,KAAKkE,GAAtB,KAEmB,MAAbR,EACT7D,EAAIoE,kBACF,IAAIjI,IAAc,EAAG,EAAG,GACV,EAAIgE,KAAKkE,GAAtB,KAGHrE,EAAIoE,kBACF,IAAIjI,IAAc,EAAG,EAAG,GACV,EAAIgE,KAAKkE,GAAtB,QAIArE,EAAI6D,SArNsBS,CACrBR,EAAYS,WACZC,YACIC,EAAczE,EAAI6D,SAASW,YACjCN,EAAef,IAAIsB,GACnBP,EAAed,YAAY,EAAGsB,KAC1BR,EAAe9G,SAAW,MAC5BqH,EAAY5D,IAAIqD,GAChBlE,EAAI6D,SAASc,eAAeF,GAC5Bd,GAAW,GAEX3D,EAAI+D,SAASC,WAAa,EAG9B,GAAgC,IAA5BhE,EAAI+D,SAASC,WAAkB,CACjC,IAAMf,EAAYgB,EAAcH,GAChCb,EAAUE,IAAInD,EAAIuB,UAClB0B,EAAUG,YAAY,EAzQV,KA0QRH,EAAU7F,SAAW,MACvB4C,EAAIuB,SAASV,IAAIoC,GACjBU,GAAW,GAEX3D,EAAI+D,SAASC,WAAa,OAQ9BL,GACF,EAAK5B,gBAIT,EAAKjD,SAAS8F,OAAO,EAAK/F,MAAO,EAAKJ,SAnQ1B,KAqQdoB,YAAc,WACZ,EAAKgF,QAAQ,4BACb,EAAKC,UAAU,SAAS,WACtB,EAAKA,UAAU,MAAM,eACrB,EAAK9F,MAAQ,EACb,EAAKM,cAAgByF,IAAE,EAAK1F,WAAWU,UACpC4C,QAAO,SAAC3C,GAAD,OAAcA,EAAIgF,mBACzBC,SAAQ,SAAAjF,GAAG,OAAIA,EAAIuB,SAAS9D,KAC5ByH,SACAC,QAAO,SAAAC,GAAQ,OAAIA,EAAS,GAAG7D,SAAS9D,KACxCT,KAAI,SAAAoI,GAAQ,OACXL,IAAEI,OAAOC,GAAU,SAAApF,GAAG,OAAIA,EAAIuB,SAAS5D,KAAGX,KACxC,SAACgD,GAAD,MA5Sa,KA4SCA,EAAIC,SAASC,cAG9Be,QAEH,EAAKc,mBAEP,EAAK9C,UAAUoG,cAAc,EAAKnG,MAAO,EAAKT,QAC9C,IAAM6G,EAAa,EAAKrG,UAAUsG,iBAChC,EAAKlG,WAAWU,UAElB,EAAKV,WAAWU,SAASxC,SAAQ,SAACiI,GAC5BA,EAAOR,iBAzTK,MAyTcQ,EAAOvF,SAASC,UAC5CsF,EAAOvF,SAASC,QAAU,MAG9B,EAAKf,gBAAkB,KA5BL,2BA6BlB,YAAwBmG,EAAxB,+CAAoC,CAAC,IAC7BE,EAD4B,QACTA,OACzB,GAAIA,EAAOR,gBAAiB,CA/TT,KAgUbQ,EAAOvF,SAASC,UAClBsF,EAAOvF,SAASC,QAlUJ,KAoUd,EAAKf,gBAAkBqG,EACvB,QApCc,oFArQN,KA6SdxD,aAAe,WACb,EAAK6C,QAAQ,sBACb,EAAKC,UAAU,kBAAkB,WAC/B,EAAKA,UAAU,MAAM,eACrB,IAAMW,EAAeV,IAAExG,SAAS0D,iBAAiB,UAC9CyD,SAAQ,SAAAxD,GAAK,OACZ6C,IAAEY,MACAC,SAAS1D,EAAMjB,MAAO,IACtB8D,IAAEc,SAASD,SAAS1D,EAAMR,QAAQxE,YAAc,GAAI,SAGvD+D,QACG6E,EAAYf,IAAEgB,QAClB,EAAKzG,cAActC,KAAI,SAAAQ,GAAG,OAAIA,EAAIR,KAAI,SAAAgJ,GAAC,OAAKA,EAAI,EAAI,SAEtDC,QAAQC,IAAI,oBACZD,QAAQC,IAAIJ,GACZ,IAAMK,EAAeV,EAAazI,KAAI,SAAAsD,GAAC,OA4E7C,SAAuB5C,EAAmB0I,GACxC,IAAMC,EAAqC,GAY3C,OAXA3I,EAAMH,SAAQ,SAACC,EAAKC,GAClBD,EAAID,SAAQ,SAAC+I,EAAO3I,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAI0I,EAAO1I,IACzByI,EAAO7J,KAAK,CAACmB,EAAGF,EAAGG,UAIzBqI,QAAQC,IAAI,WACZD,QAAQC,IAAIxI,GACZuI,QAAQC,IAAI,WACZD,QAAQC,IAAIG,GACL,CACLE,OAAQF,EACRD,gBACA7B,UAAW,GACXiC,GAAI,EACJC,GAAI,EACJC,GAAI,GA/FyCC,CAAchL,EAAO2E,GAAIA,MACpE,GACoC,EAAlCwF,EAAUnD,QAAO,SAAAhF,GAAC,OAAIA,KAAGP,SACzB2H,IAAEoB,GACCnJ,KAAI,SAAA4J,GAAW,OAAIA,EAAYL,UAC/BR,UACA9E,QAAQ7D,OALb,CAYA,IAAMoC,ECvXL,SACLqH,EACAC,EACAC,EACAC,GAEA,GAAIH,EAAQC,IAAWC,EAAM3J,OAC3B,MAAM,IAAI6J,MAAM,6BAElB,IACMC,EAAYC,YAAYC,MAGxBd,EAAQ,EA4Cd,SAASe,EACP3J,EACAmG,EACAyD,GAEA,OAAO,eACF5J,EADL,CAEE6I,OAAQ7I,EAAM6I,OAAOvJ,IAAIsK,GACzBlB,cAAe1I,EAAM0I,cACrB7B,UAAW7G,EAAM6G,UAAUgD,OAAO1D,KAItC,SAASR,EAAQ3F,GACf,OAAO2J,EAAe3J,EAAO,KAAK,SAAA8J,GAAC,MAAI,CAACA,EAAE,IAAKA,EAAE,GAAIA,EAAE,OAGzD,SAASlE,EAAQ5F,GAEf,OAAO2J,EAAe3J,EAAO,KAAK,SAAA8J,GAAC,MAAI,CAACA,EAAE,GAAIA,EAAE,IAAKA,EAAE,OAGzD,SAASC,EAAQ/J,GAEf,OAAO2J,EAAe3J,EAAO,KAAK,SAAA8J,GAAC,MAAI,EAAEA,EAAE,GAAIA,EAAE,GAAIA,EAAE,OAIzD,SAASE,EAAShK,GAChB,IAAIiK,EAAOvF,OAAOwF,UAChBC,EAAOzF,OAAOwF,UACdE,EAAO1F,OAAOwF,UAChBlK,EAAM6I,OAAOhJ,SAAQ,SAAAiK,GACfA,EAAE,GAAKG,IAAMA,EAAOH,EAAE,IACtBA,EAAE,GAAKK,IAAMA,EAAOL,EAAE,IACtBA,EAAE,GAAKM,IAAMA,EAAON,EAAE,OAE5B,IAAMnB,EAAM,eACP3I,EADO,CAEV6I,OAAQ7I,EAAM6I,OAAOvJ,KACnB,SAAAwK,GAAC,MAAI,CAACA,EAAE,GAAKG,EAAMH,EAAE,GAAKK,EAAML,EAAE,GAAKM,MAEzCtB,GAAI9I,EAAM8I,GAAKmB,EACflB,GAAI/I,EAAM+I,GAAKoB,EACfnB,GAAIhJ,EAAMgJ,GAAKoB,IAWjB,OATAzB,EAAOE,OAAOwB,MAAK,SAACC,EAAGR,GACrB,IAAMS,EAAKD,EAAE,GAAKR,EAAE,GACdU,EAAKF,EAAE,GAAKR,EAAE,GACdW,EAAKH,EAAE,GAAKR,EAAE,GACpB,OAAW,IAAPS,EAAiBA,EACV,IAAPC,EAAiBA,EACV,IAAPC,EAAiBA,EACd,KAEF9B,EAGT,SAAS+B,EAAOC,EAAoBC,GAClC,IAAK,IAAIhI,EAAI,EAAGA,EAAIgI,EAAalL,OAAQkD,IAAK,CAE5C,IADA,IAAIiI,GAAQ,EACHC,EAAI,EAAGA,EAAIF,EAAahI,GAAGiG,OAAOnJ,OAAQoL,IAAK,CACtD,IAAMC,EAAKJ,EAAY9B,OAAOiC,GACxBE,EAAKJ,EAAahI,GAAGiG,OAAOiC,GAClCD,EAAQA,GAASE,EAAG,KAAOC,EAAG,IAAMD,EAAG,KAAOC,EAAG,IAAMD,EAAG,KAAOC,EAAG,GAEtE,GAAIH,EAAO,OAEbD,EAAa9L,KAAK6L,GAtEpBtB,EAAQA,EAAMQ,OAAOR,GA6FrB,IAAM4B,EApBN,SAA8B3B,GAE5B,IADA,IAAMX,EAAS,GACN/F,EAAI,EAAGA,EAAI0G,EAAO5J,OAAQkD,IAAK,CAGtC,IAFA,IAAMsI,EAA2B,GAC7BlL,EAAQsJ,EAAO1G,GACVkI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBV,EAAOV,EAAShK,GAAQkL,GACxBlL,EAAQ4F,EAAQ5F,GAElBA,EAAQ+J,EAAQ/J,GAElBA,EAAQ2F,EAAQ3F,GAElB2I,EAAO7J,KAAKoM,GAEd,OAAOvC,EAGa0C,CAAqB/B,GAE3C,SAASgC,EAAOrL,EAAWF,EAAWG,GACpC,QAAID,EAAI,GAAKA,GAAKkJ,GAASpJ,EAAI,GAAKA,GAAKqJ,GAAUlJ,EAAI,GAAKA,GAAK0I,IAGZ,IAA9CS,EAAMnJ,EAAIiJ,EAAQC,EAASrJ,EAAIoJ,EAAQlJ,GAGhD,SAASsL,EAAQtL,EAAWF,EAAWG,EAAWsL,GAChD,GAAIvL,EAAI,GAAKA,GAAKkJ,GAASpJ,EAAI,GAAKA,GAAKqJ,GAAUlJ,EAAI,GAAKA,GAAK0I,EAC/D,MAAM,IAAIW,MAAM,kBAAoBtJ,EAAI,KAAOF,EAAI,KAAOG,GAC5DmJ,EAAMnJ,EAAIiJ,EAAQC,EAASrJ,EAAIoJ,EAAQlJ,IAAMuL,EAG/C,SAASC,EAAcxL,EAAWF,EAAWG,EAAWF,GACtD,IAAK,IAAI4C,EAAI,EAAGA,EAAI5C,EAAM6I,OAAOnJ,OAAQkD,IAAK,CAC5C,IAAMkH,EAAI9J,EAAM6I,OAAOjG,GACvB,IAAK0I,EAAOxB,EAAE,GAAK7J,EAAG6J,EAAE,GAAK/J,EAAG+J,EAAE,GAAK5J,GAAI,OAAO,EAEpD,OAAO,EAGT,SAASwL,EAAWzL,EAAWF,EAAWG,EAAWF,GACnDA,EAAM6I,OAAOhJ,SAAQ,SAAAiK,GACnByB,EAAQzB,EAAE,GAAK7J,EAAG6J,EAAE,GAAK/J,EAAG+J,EAAE,GAAK5J,EAAG,MAI1C,SAASyL,EAAa1L,EAAWF,EAAWG,EAAWF,GACrDA,EAAM6I,OAAOhJ,SAAQ,SAAAiK,GACnByB,EAAQzB,EAAE,GAAK7J,EAAG6J,EAAE,GAAK/J,EAAG+J,EAAE,GAAK5J,EAAG,MAI1C,IAYM0L,EAA8B,GAgC9BjD,EA/BN,SAASkD,EAAWC,GAClB,GAA0B,IAAtBA,EAAWpM,OAEb,OADA6I,QAAQC,IAAI,qBACLnB,IAAE0E,UAAUH,GAGrB,IAAK,IAAI3L,EAAI,EAAGA,EAAIkJ,EAAOlJ,IACzB,IAAK,IAAIF,EAAI,EAAGA,EAAIqJ,EAAQrJ,IAC1B,IAAK,IAAIG,EAAI,EAAGA,EAAI0I,EAAO1I,IACzB,IAAK,IAAI0C,EAAI,EAAGA,EAAIkJ,EAAW,GAAGpM,OAAQkD,IAAK,CAC7C,IAAM5C,EAAQ8L,EAAW,GAAGlJ,GAC5B,GAAI6I,EAAcxL,EAAGF,EAAGG,EAAGF,GAAQ,CACjC0L,EAAWzL,EAAGF,EAAGG,EAAGF,GACpB4L,EAAa9M,KAAK,CAChBmB,EAAID,EAAM8I,GACV/I,EAAIC,EAAM+I,GACV7I,EAAIF,EAAMgJ,GACVhJ,IAEF,IAAMgM,EAAMH,EAAWC,EAAWG,MAAM,IAGxC,GAFAL,EAAaM,MACbP,EAAa1L,EAAGF,EAAGG,EAAGF,GAClBgM,EAAK,OAAOA,GAM1B,OAAO,KAGMH,CAAWZ,GACtBkB,EAAa,KAwBjB,OAtBIxD,IACFwD,EAAa9E,IAAEI,OAAOkB,GAAQ,SAAAyD,GAC5B,IAAMlM,EAAIkM,EAAY,GAAKA,EAAY,GAAGpD,GAC1C,OACE3B,IAAEgF,IACAD,EAAY,GAAGvD,OAAOvJ,KAAI,SAAAgN,GACxB,OAAOpM,EAAIoM,EAAM,OAEjBF,EAAY,GAAGvD,OAAOnJ,UAE3BJ,KAAI,SAAA8M,GAAW,MAAK,CACrBnM,EAAGmM,EAAY,GACfrM,EAAGqM,EAAY,GACflM,EAAGkM,EAAY,GACfvF,UAAWuF,EAAY,GAAGvF,UAC1B6B,cAAe0D,EAAY,GAAG1D,mBAMlCH,QAAQC,IAAI,kBAAoBiB,YAAYC,MAAQF,GAAa,MAC1D2C,ED2HiBI,CAAM,EAAG,EAAGnE,EAAWK,GACtC3G,GAGHyG,QAAQC,IAAI1G,GACZA,EAAYjC,SAAQ,SAAC2M,EAAG5J,GACtB,IAAM6J,EAAc,EAAK5K,kBAAkBQ,SACxCqK,MAAK,SAACxH,GAAD,OAAYA,EAAE1F,aAAegN,EAAE9D,iBACpCtI,QACHqM,EAAOlK,SAAWkK,EAAOlK,SAASnC,QAClCqM,EAAOlK,SAAS7D,MAAMiO,OAAOzO,EAAO0E,EAAI1E,EAAOwB,SAC/C+M,EAAOpG,SAASC,WAAa,EAC7B,EAAKvE,iBAAiBoB,IAAIsJ,MAE5B,EAAKtL,MAAMgC,IAAI,EAAKpB,kBACpB,EAAKD,YAAcA,EACnB,EAAKR,MAAQ,EACb,EAAK6F,QAAQ,IACb,EAAK9C,iBAhBLuI,MAAM,iDAPNA,MACE,wEAyBN,EAAK/K,kBAAkBQ,SAASxC,SAAQ,SAAAyC,GACtCA,EAAIuK,OACFvK,EAAIuB,SAAS5D,EAAI,EAAKuB,MAAMvB,EAC5BqC,EAAIuB,SAAS9D,EAAI,EAAKyB,MAAMzB,EAC5B,GAEFuC,EAAI6D,SAASjG,EAAI,MAtWP,KAyWN4M,cAAe,EAzWT,KA0WNzI,cAAgB,WAClB,EAAKyI,eAGT,EAAKA,cAAe,EACpBC,sBAAsB,EAAKC,aA/Wf,KAiXNA,UAAY,WAClB,EAAKF,cAAe,EACpB,EAAK5K,eAnXO,KAsXN+K,SAA0B,KAtXpB,KAuXd9F,QAAU,SAAC+F,GACLA,IAAS,EAAKD,WAGlB,EAAKA,SAAWC,EAChBrM,SAASC,eAAe,kBAAmBqM,UAAYD,IA5X3C,KA8Xd9F,UAAY,SAAC8F,EAAqBE,GAChC,IAAMC,EAASxM,SAASC,eAAe,UACnCoM,GACFG,EAAOF,UAAYD,EACnBG,EAAOtJ,MAAMuJ,WAAa,UAC1B,EAAK5L,eAAiB0L,GAEtBC,EAAOtJ,MAAMuJ,WAAa,UApY5BC,KAAKnM,SAASoM,UAAUC,SAAU,EAClCF,KAAKnM,SAASoM,UAAUlK,KAAO7E,IAC/B8O,KAAKxM,OAAO8C,SAAS3D,EAAI,EAEzBqN,KAAKnM,SAASsM,QAAQ1M,OAAOC,WAAYD,OAAOE,aAChDL,SAAS8M,KAAKlK,YAAY8J,KAAKnM,SAASwM,YACxC/M,SAASC,eAAe,UAAW+M,iBAAiB,SAAS,WAC3D,EAAKnM,oBAEPb,SAASgN,iBAAiB,aAAa,WACrC,EAAK7L,WAAY,KAEnBnB,SAASgN,iBAAiB,WAAW,WACnC,EAAK7L,WAAY,KAEnBhB,OAAOH,SAASgN,iBAAiB,aAAa,SAAAC,GAC5C,EAAKtM,MAAMvB,EAAK6N,EAAGC,QAAU/M,OAAOC,WAAc,EAAI,EACtD,EAAKO,MAAMzB,GAAM+N,EAAGE,QAAUhN,OAAOE,YAAe,EAAI,EACrC,IAAf,EAAKI,OAAe,EAAKU,UAE7B,EAAKqC,mBAEPrD,OAAOH,SAASgN,iBAAiB,SAAS,WACxC,IAAMI,EAAW,EAAKxM,gBACjBwM,IAGLA,EAAS1L,SAASC,QAvDC,KAwDjByL,EAAS1L,SAASC,QAzDJ,IACG,GA2DnB,EAAK6B,oBAGP,IAAK,IAAIe,EAAS,EAAGA,EAAS,EAAGA,GAAU,EACzC,IAAK,IAAID,EAAS,EAAGA,EAAS,EAAGA,GAAU,EAAG,CAC5C,IAAMlF,EAAoB,GAATmF,EAAN,GACLrF,EAAoB,GAAToF,EAAN,GACL+I,EAAa,IAAIzP,IACrBG,EAAmBwB,QACnBzB,EAAkByB,SAEpB8N,EAAWrK,SAAS5D,EAAIA,EACxBiO,EAAWrK,SAAS9D,EAAIA,EACvBmO,EAAmB9I,OAASA,EAC5B8I,EAAmB/I,OAASA,EAC5B+I,EAAmB3L,SAASW,aAAc,EAC3CqK,KAAK5L,WAAWwB,IAAI+K,GACpB,IAAMC,EAAmB,IAAI1P,IAC3BM,EACAP,EAAc4B,SAEhB+N,EAAiBtK,SAAS5D,EAAIA,EAAI,IAClCkO,EAAiBtK,SAAS9D,EAAIA,EAAI,IACjCoO,EAAyB5L,SAASC,QAAU,EAC5C2L,EAAyB5L,SAASW,aAAc,EAChDiL,EAAyB7G,iBAAkB,EAC5CiG,KAAK5L,WAAWwB,IAAIgL,GAGxBZ,KAAKpM,MAAMgC,IAAIoK,KAAK5L,YACpB,IAAMyM,EAAQ,IAAI3P,IAAiB,SAAU,EAAG,EAAG,GACnD2P,EAAMvK,SAASwK,IAAI,EAAG,EAAG,IACzBD,EAAM1N,YAAa,EACnB0N,EAAME,OAAOC,QAAQpF,MAAQ,KAC7BiF,EAAME,OAAOC,QAAQnF,OAAS,KAC9BgF,EAAME,OAAOE,KAAO,MACpBJ,EAAME,OAAOvN,OAAO0N,KAAO,IAC3BL,EAAME,OAAOI,OAAS,EACtBnB,KAAKpM,MAAMgC,IAAIiL,GACf,IAAMO,EAAe,IAAIlQ,IACzBkQ,EAAaC,UAAY,GACzBrB,KAAKpM,MAAMgC,IAAIwL,GAEfpB,KAAKrL,eA6WT,SAASsD,EAAmB5C,GAC1B,OAAO,IAAInE,KAAe,GAAI,GAAMmE,GAAI,IAG1C,SAAS2D,EAAcH,GACrB,OAAO,IAAI3H,IACe,GAAhB2H,EAAYnG,EAAnB,IACuB,GAAhBmG,EAAYrG,EAAnB,IACe,GAAhBqG,EAAYlG,EAAU,IAAO,IAIlB/B,QE/ff0Q,IAAS3H,OAAO,kBAAC,EAAD,MAASrG,SAASC,eAAe,W","file":"static/js/main.ff336fcc.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nconst piece0 = [\n  [1, 1],\n  [0, 1]\n];\n\nconst piece1 = [\n  [2, 0],\n  [1, 1]\n];\n\nconst piece1_1 = [\n  [2, 1],\n  [0, 1]\n];\n\nconst piece2 = [\n  [1, 1],\n  [1, 0],\n  [1, 1]\n];\n\nconst piece3 = [\n  [1, 1, 1],\n  [0, 1, 0]\n];\n\nconst piece4 = [\n  [1, 1],\n  [0, 1],\n  [0, 2]\n];\n\nconst piece6 = [\n  [1, 1],\n  [0, 2],\n  [0, 1]\n];\n\nconst piece7 = [\n  [1, 1, 1],\n  [2, 0, 0]\n];\n\nconst piece8 = [\n  [1, 1, 1],\n  [1, 0, 0]\n];\n\nconst piece9 = [\n  [0, 1, 1],\n  [1, 1, 1]\n];\n\nconst piece10 = [\n  [1, 1],\n  [1, 2]\n];\n\nconst piece11 = [\n  [1, 1, 0],\n  [0, 1, 1]\n];\n\nconst piece12 = [\n  [2, 1, 0],\n  [0, 1, 1]\n];\n\nconst piece13 = [\n  [0, 1, 0],\n  [2, 1, 1]\n];\n\nexport const PIECES = [\n  piece0,\n  piece1,\n  piece1_1,\n  piece2,\n  piece13,\n  piece3,\n  piece4,\n  piece6,\n  piece7,\n  piece8,\n  piece9,\n  piece10,\n  piece11,\n  piece12\n];\n\nexport const COLORS = [0x39375b, 0x745c97, 0xd597ce, 0xf5b0cb];\n\nexport function computePieceObjects(\n  blockGeometry: THREE.Geometry\n): THREE.Object3D[] {\n  blockGeometry.computeBoundingBox();\n  const size = new THREE.Vector3();\n  blockGeometry.boundingBox.getSize(size);\n  return PIECES.map((packedGeo, pieceIndex) => {\n    const objectMaterial = new THREE.MeshStandardMaterial({\n      color: COLORS[pieceIndex % COLORS.length],\n      roughness: 0.9\n    });\n    const geo = new THREE.Geometry();\n    packedGeo.forEach((row, y) => {\n      row.forEach((piece, x) => {\n        for (let z = 0; z < piece; z++) {\n          const thisGeo = blockGeometry.clone();\n          thisGeo.translate(x * size.x, y * size.y, z * size.z);\n          geo.mergeMesh(new THREE.Mesh(thisGeo));\n          geo.mergeVertices();\n        }\n      });\n    });\n    geo.mergeVertices();\n    const mesh = new THREE.Mesh(geo, objectMaterial);\n    mesh.receiveShadow = true;\n    mesh.castShadow = true;\n\n    return mesh;\n  });\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport _ from \"lodash\";\nimport { computePieceObjects, PIECES, COLORS } from \"./pieces\";\nimport { solve, SolvedPiece } from \"./solver\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    new UbongoRenderer();\n  }\n  render() {\n    return (\n      <div id=\"overlay-container\">\n        <div id=\"text-container\"></div>\n        <div id=\"button\"></div>\n      </div>\n    );\n  }\n}\n\nconst whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\nconst solidLineMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });\n\nconst boardLinesGeometry = new THREE.Geometry();\nboardLinesGeometry.vertices.push(new THREE.Vector3(0, 0, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0.1, 0, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0.1, 0.1, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0.0, 0.1, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0, 0, 0));\n\nconst boardBoxGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.001);\nconst blockGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);\nconst pieceObjects = computePieceObjects(blockGeometry);\n\nconst HOVER_OPACITY = 0.25;\nconst SELECTED_OPACITY = 0.8;\nconst PIECES_PER_ROW = 5;\nconst ANIM_SPEED = 0.025;\nconst ANIM_SPEED_MOVE = 0.01;\n\nclass UbongoRenderer {\n  private overlayContainer = document.getElementById(\"overlay-container\")!;\n  private camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    100\n  );\n  private scene = new THREE.Scene();\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private state = 1;\n  private raycaster = new THREE.Raycaster();\n  private mouse = new THREE.Vector2();\n  private lastHoverTarget: THREE.Object3D | null = null;\n  private buttonCallback = () => {};\n  private boardGroup = new THREE.Group();\n  private selectedBoard: boolean[][] = [];\n  private selectPiecesGroup = new THREE.Group();\n  private solveResult: SolvedPiece[] = [];\n  private solvePiecesGroup = new THREE.Group();\n  private mouseDown = false;\n  private controls: OrbitControls | null = null;\n  constructor() {\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.camera.position.z = 1;\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n    document.getElementById(\"button\")!.addEventListener(\"click\", () => {\n      this.buttonCallback();\n    });\n    document.addEventListener(\"mousedown\", () => {\n      this.mouseDown = true;\n    });\n    document.addEventListener(\"mouseup\", () => {\n      this.mouseDown = false;\n    });\n    window.document.addEventListener(\"mousemove\", ev => {\n      this.mouse.x = (ev.clientX / window.innerWidth) * 2 - 1;\n      this.mouse.y = -(ev.clientY / window.innerHeight) * 2 + 1;\n      if (this.state === 6 && this.mouseDown) {\n      }\n      this.scheduleFrame();\n    });\n    window.document.addEventListener(\"click\", () => {\n      const selected = this.lastHoverTarget as any;\n      if (!selected) {\n        return;\n      }\n      selected.material.opacity =\n        selected.material.opacity === SELECTED_OPACITY\n          ? HOVER_OPACITY\n          : SELECTED_OPACITY;\n      this.scheduleFrame();\n    });\n\n    for (let xIndex = 0; xIndex < 5; xIndex += 1) {\n      for (let yIndex = 0; yIndex < 5; yIndex += 1) {\n        const x = -0.2 + xIndex * 0.1;\n        const y = -0.2 + yIndex * 0.1;\n        const boardPiece = new THREE.Line(\n          boardLinesGeometry.clone(),\n          solidLineMaterial.clone()\n        );\n        boardPiece.position.x = x;\n        boardPiece.position.y = y;\n        (boardPiece as any).xIndex = xIndex;\n        (boardPiece as any).yIndex = yIndex;\n        (boardPiece as any).material.transparent = true;\n        this.boardGroup.add(boardPiece);\n        const boardPieceTarget = new THREE.Mesh(\n          boardBoxGeometry,\n          whiteMaterial.clone()\n        );\n        boardPieceTarget.position.x = x + 0.05;\n        boardPieceTarget.position.y = y + 0.05;\n        (boardPieceTarget as any).material.opacity = 0;\n        (boardPieceTarget as any).material.transparent = true;\n        (boardPieceTarget as any).isRayCastTarget = true;\n        this.boardGroup.add(boardPieceTarget);\n      }\n    }\n    this.scene.add(this.boardGroup);\n    const light = new THREE.PointLight(0xffffff, 1, 0, 1);\n    light.position.set(0, 0, 0.3);\n    light.castShadow = true;\n    light.shadow.mapSize.width = 1024;\n    light.shadow.mapSize.height = 1024;\n    light.shadow.bias = 0.00000000001;\n    light.shadow.camera.near = 0.01;\n    light.shadow.radius = 3;\n    this.scene.add(light);\n    const ambientLight = new THREE.AmbientLight();\n    ambientLight.intensity = 0.5;\n    this.scene.add(ambientLight);\n\n    this.renderFrame();\n  }\n  renderFrame = () => {\n    if (this.state === 1) {\n      this.selectBoard();\n    } else if (this.state === 2) {\n      let maxOpacity = 0;\n      this.boardGroup.children.forEach((obj: any) => {\n        obj.material.opacity = Math.max(obj.material.opacity - ANIM_SPEED, 0);\n        if (obj.material.opacity > maxOpacity) {\n          maxOpacity = obj.material.opacity;\n        }\n      });\n      if (maxOpacity === 0) {\n        this.state = 3;\n        this.camera.updateMatrixWorld();\n        pieceObjects.forEach((obj, i) => {\n          const x = i % PIECES_PER_ROW;\n          const y = Math.floor(i / PIECES_PER_ROW);\n          const viewObj = obj.clone();\n          viewObj.translateX((-2 + x) * 0.5);\n          viewObj.translateY(0.6 - y * 0.65);\n          viewObj.translateZ(-0.8);\n          viewObj.receiveShadow = true;\n          viewObj.castShadow = true;\n          (viewObj as any).material.transparent = true;\n          (viewObj as any).pieceIndex = i;\n          this.selectPiecesGroup.add(viewObj);\n\n          const numberInput = document.createElement(\"input\");\n          numberInput.type = \"number\";\n          numberInput.value = \"0\";\n          numberInput.min = \"0\";\n          this.overlayContainer.appendChild(numberInput);\n\n          const widthHalf = window.innerWidth / 2,\n            heightHalf = window.innerHeight / 2;\n          const screenPos = viewObj.position.clone();\n          screenPos.y -= 0.2;\n          screenPos.project(this.camera);\n          numberInput.style.opacity = \"1\";\n          numberInput.dataset.pieceIndex = i.toString();\n          numberInput.style.left = `${Math.round(\n            screenPos.x * widthHalf + widthHalf\n          )}px`;\n          numberInput.style.top = `${Math.round(\n            -(screenPos.y * heightHalf) + heightHalf\n          )}px`;\n        });\n        this.scene.add(this.selectPiecesGroup);\n      }\n      this.scheduleFrame();\n    } else if (this.state === 3) {\n      this.selectPieces();\n    } else if (this.state === 4) {\n      let maxOpacity = 0;\n      document.querySelectorAll(\"input\").forEach(input => {\n        const curOpacity = Number(input.style.opacity!);\n        const newOpacity = Math.max(curOpacity - ANIM_SPEED, 0);\n        input.style.opacity = newOpacity.toString();\n        maxOpacity = Math.max(newOpacity, maxOpacity);\n      });\n      this.selectPiecesGroup.children.forEach((obj: any, i) => {\n        obj.material.opacity = Math.max(obj.material.opacity - ANIM_SPEED, 0);\n        maxOpacity = Math.max(obj.material.opacity, maxOpacity);\n      });\n      if (maxOpacity === 0) {\n        this.scene.remove(this.selectPiecesGroup);\n        Array.from(document.querySelectorAll(\"input\")).forEach(input => {\n          input.parentElement?.removeChild(input);\n        });\n\n        const childrenToRemove = this.boardGroup.children.filter(c => {\n          if (!(c instanceof THREE.Line)) {\n            return true;\n          }\n          return !this.selectedBoard[(c as any).yIndex][(c as any).xIndex];\n        });\n        childrenToRemove.forEach(c => {\n          this.boardGroup.remove(c);\n        });\n        this.boardGroup.translateZ(-0.6);\n        this.state = 5;\n      }\n      this.scheduleFrame();\n    } else if (this.state === 5) {\n      let maxLen = 0;\n      let minOpacity = 1;\n      this.solvePiecesGroup.children.forEach((obj, i) => {\n        const targetPos = solveStartPosition(i);\n        targetPos.sub(obj.position);\n        targetPos.clampLength(0, ANIM_SPEED_MOVE);\n        if (targetPos.length() > maxLen) {\n          maxLen = targetPos.length();\n        }\n        obj.position.add(targetPos);\n        obj.rotateX(0.005);\n        obj.rotateY(0.0025);\n      });\n      this.boardGroup.children.forEach((obj: any) => {\n        obj.material.opacity = Math.min(obj.material.opacity + ANIM_SPEED, 1);\n        if (obj.material.opacity < minOpacity) {\n          minOpacity = obj.material.minOpacity;\n        }\n      });\n      if (maxLen <= 0.001 && minOpacity === 1) {\n        this.controls = new OrbitControls(\n          this.camera,\n          document.getElementsByTagName(\"body\")[0]\n        );\n        /*this.controls.rotateSpeed = 1.0;\n        this.controls.zoomSpeed = 1.2;\n        this.controls.panSpeed = 0.8;*/\n        this.controls.target = new THREE.Vector3(0, 0, -0.6);\n        this.state = 6;\n      }\n      this.scheduleFrame();\n    } else if (this.state === 6) {\n      this.controls?.update();\n      let hasMoved = false;\n      let handledIndices = 0;\n      this.solvePiecesGroup.children.forEach((obj, i) => {\n        if (hasMoved) {\n          obj.rotation.x += 0.005;\n          obj.rotation.y += 0.0025;\n          const targetPos = solveStartPosition(i - handledIndices);\n          targetPos.sub(obj.position);\n          targetPos.clampLength(0, ANIM_SPEED_MOVE);\n          if (targetPos.length() > 0.0001) {\n            obj.position.add(targetPos);\n          }\n        } else {\n          handledIndices += 1;\n          const solvedPiece = this.solveResult[i];\n          if (obj.userData.finalState === 0) {\n            obj.rotation.x += 0.005;\n            obj.rotation.y += 0.0025;\n            const targetPos = finalPosition(solvedPiece);\n            targetPos.z += 0.4;\n            targetPos.sub(obj.position);\n            targetPos.clampLength(0, ANIM_SPEED_MOVE);\n            if (targetPos.length() > 0.0001) {\n              obj.position.add(targetPos);\n              hasMoved = true;\n            } else {\n              obj.userData.finalState = 1;\n            }\n          }\n          if (obj.userData.finalState === 1) {\n            const targetRotation = calculateTotalRotation(\n              solvedPiece.rotations\n            ).toVector3();\n            const rotationVec = obj.rotation.toVector3();\n            targetRotation.sub(rotationVec);\n            targetRotation.clampLength(0, ANIM_SPEED * 2);\n            if (targetRotation.length() > 0.000001) {\n              rotationVec.add(targetRotation);\n              obj.rotation.setFromVector3(rotationVec);\n              hasMoved = true;\n            } else {\n              obj.userData.finalState = 2;\n            }\n          }\n          if (obj.userData.finalState === 2) {\n            const targetPos = finalPosition(solvedPiece);\n            targetPos.sub(obj.position);\n            targetPos.clampLength(0, ANIM_SPEED_MOVE);\n            if (targetPos.length() > 0.0001) {\n              obj.position.add(targetPos);\n              hasMoved = true;\n            } else {\n              obj.userData.finalState = 3;\n            }\n          }\n        }\n      });\n      /*this.camera.position.setX(this.mouse.x);\n      this.camera.position.setY(this.mouse.y);\n      this.camera.lookAt(new THREE.Vector3(0, 0, 0));*/\n      if (hasMoved) {\n        this.scheduleFrame();\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n  selectBoard = () => {\n    this.setText(\"1/3: Piirrä pelilauta\");\n    this.setButton(\"Jatka\", () => {\n      this.setButton(null, () => {});\n      this.state = 2;\n      this.selectedBoard = _(this.boardGroup.children)\n        .filter((obj: any) => obj.isRayCastTarget)\n        .groupBy(obj => obj.position.y)\n        .values()\n        .sortBy(objArray => objArray[0].position.y)\n        .map(objArray =>\n          _.sortBy(objArray, obj => obj.position.x).map(\n            (obj: any) => obj.material.opacity === SELECTED_OPACITY\n          )\n        )\n        .value();\n\n      this.scheduleFrame();\n    });\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(\n      this.boardGroup.children\n    );\n    this.boardGroup.children.forEach((object: any) => {\n      if (object.isRayCastTarget && object.material.opacity === HOVER_OPACITY) {\n        object.material.opacity = 0;\n      }\n    });\n    this.lastHoverTarget = null;\n    for (const intersect of intersects) {\n      const object = intersect.object as any;\n      if (object.isRayCastTarget) {\n        if (object.material.opacity !== SELECTED_OPACITY) {\n          object.material.opacity = HOVER_OPACITY;\n        }\n        this.lastHoverTarget = object;\n        break;\n      }\n    }\n  };\n  selectPieces = () => {\n    this.setText(\"2/3: Valitse palat\");\n    this.setButton(\"Ratkaise lauta\", () => {\n      this.setButton(null, () => {});\n      const pieceIndices = _(document.querySelectorAll(\"input\"))\n        .flatMap(input =>\n          _.times(\n            parseInt(input.value, 10),\n            _.constant(parseInt(input.dataset.pieceIndex || \"\", 10))\n          )\n        )\n        .value();\n      const flatBoard = _.flatten(\n        this.selectedBoard.map(row => row.map(t => (t ? 1 : 0)))\n      );\n      console.log(\"-------flatboard\");\n      console.log(flatBoard);\n      const solverPieces = pieceIndices.map(i => toSolverPiece(PIECES[i], i));\n      if (\n        flatBoard.filter(x => x).length * 2 !==\n        _(solverPieces)\n          .map(solverPiece => solverPiece.blocks)\n          .flatten()\n          .value().length\n      ) {\n        alert(\n          \"Please select correct pieces or confirm that the board is correct\"\n        );\n        return;\n      }\n      const solveResult = solve(5, 5, flatBoard, solverPieces);\n      if (!solveResult) {\n        alert(\"unable to solve, please check the pieces\");\n      } else {\n        console.log(solveResult);\n        solveResult.forEach((p, i) => {\n          const cloned: any = this.selectPiecesGroup.children\n            .find((c: any) => c.pieceIndex === p.originalIndex)!\n            .clone();\n          cloned.material = cloned.material.clone();\n          cloned.material.color.setHex(COLORS[i % COLORS.length]);\n          cloned.userData.finalState = 0;\n          this.solvePiecesGroup.add(cloned);\n        });\n        this.scene.add(this.solvePiecesGroup);\n        this.solveResult = solveResult;\n        this.state = 4;\n        this.setText(\"\");\n        this.scheduleFrame();\n      }\n    });\n    this.selectPiecesGroup.children.forEach(obj => {\n      obj.lookAt(\n        obj.position.x - this.mouse.x,\n        obj.position.y - this.mouse.y,\n        1\n      );\n      obj.rotation.z = 0;\n    });\n  };\n  private hasScheduled = false;\n  private scheduleFrame = () => {\n    if (this.hasScheduled) {\n      return;\n    }\n    this.hasScheduled = true;\n    requestAnimationFrame(this.scheduled);\n  };\n  private scheduled = () => {\n    this.hasScheduled = false;\n    this.renderFrame();\n  };\n\n  private lastText: string | null = null;\n  setText = (text: string) => {\n    if (text === this.lastText) {\n      return;\n    }\n    this.lastText = text;\n    document.getElementById(\"text-container\")!.innerText = text;\n  };\n  setButton = (text: string | null, callback: () => void) => {\n    const button = document.getElementById(\"button\")!;\n    if (text) {\n      button.innerText = text;\n      button.style.visibility = \"visible\";\n      this.buttonCallback = callback;\n    } else {\n      button.style.visibility = \"hidden\";\n    }\n  };\n}\n\nfunction toSolverPiece(piece: number[][], originalIndex: number) {\n  const result: [number, number, number][] = [];\n  piece.forEach((row, y) => {\n    row.forEach((depth, x) => {\n      for (let z = 0; z < depth; z++) {\n        result.push([x, y, z]);\n      }\n    });\n  });\n  console.log(\"-------\");\n  console.log(piece);\n  console.log(\"--->\");\n  console.log(result);\n  return {\n    blocks: result,\n    originalIndex,\n    rotations: [],\n    dX: 0,\n    dY: 0,\n    dZ: 0\n  };\n}\n\nfunction calculateTotalRotation(steps: (\"x\" | \"y\" | \"z\")[]) {\n  const obj = new THREE.Object3D();\n  steps.forEach(rotation => {\n    if (rotation === \"x\") {\n      obj.rotateOnWorldAxis(\n        new THREE.Vector3(1, 0, 0),\n        (90 / 360) * (2 * Math.PI)\n      );\n    } else if (rotation === \"y\") {\n      obj.rotateOnWorldAxis(\n        new THREE.Vector3(0, 1, 0),\n        (90 / 360) * (2 * Math.PI)\n      );\n    } else {\n      obj.rotateOnWorldAxis(\n        new THREE.Vector3(0, 0, 1),\n        (90 / 360) * (2 * Math.PI)\n      );\n    }\n  });\n  return obj.rotation;\n}\n\nfunction solveStartPosition(i: number) {\n  return new THREE.Vector3(-1, -0.6 * i, -0.4);\n}\n\nfunction finalPosition(solvedPiece: SolvedPiece) {\n  return new THREE.Vector3(\n    -0.15 + solvedPiece.x * 0.1,\n    -0.15 + solvedPiece.y * 0.1,\n    solvedPiece.z * 0.1 + 0.05 - 0.6\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\n\ntype Block = [number, number, number];\nexport type Piece = {\n  blocks: Block[];\n  originalIndex: number;\n  rotations: (\"x\" | \"y\" | \"z\")[];\n  dX: number;\n  dY: number;\n  dZ: number;\n};\ntype PlacedPiece = [number, number, number, Piece];\nexport type SolvedPiece = {\n  x: number;\n  y: number;\n  z: number;\n  rotations: (\"x\" | \"y\" | \"z\")[];\n  originalIndex: number;\n};\n\nexport function solve(\n  width: number,\n  height: number,\n  board: number[],\n  pieces: Piece[]\n) {\n  if (width * height !== board.length) {\n    throw new Error(\"invalid board/width/heigh\");\n  }\n  const PROFILE = false;\n  const startTime = performance.now();\n  if (PROFILE) console.profile();\n\n  const depth = 2;\n  //const board = [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1];\n\n  /*const pieces: Piece[] = [\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0]\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 0],\n      [1, 0, 0],\n      [1, 0, 1]\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [1, 2, 0],\n      [0, 2, 0]\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 0],\n      [1, 0, 0],\n      [1, 1, 0],\n      [1, 0, 1]\n    ]\n  ];\nvar board = [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0];\nvar width = 4;\nvar height = 3;\nvar depth = 2;\nvar pieces = [[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 2, 0]],\n\t\t\t  [[0, 0, 1], [1, 0, 1], [1, 1, 1], [1, 2, 1], [1, 2, 0]],\n\t\t\t  [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]]];\nvar pieces = [[[0, 2, 1], [0, 2, 0], [1, 2, 0], [1, 1, 0], [1, 0, 0]],\n\t\t\t  [[0, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0], [1, 1, 0]],\n\t\t\t  [[0, 2, 0], [1, 2, 0], [1, 1, 0], [1, 0, 0]]];\n*/\n\n  // make the board 2 deep. why even bother reading depth...\n  board = board.concat(board);\n\n  function rotateWithFunc(\n    piece: Piece,\n    rotation: \"x\" | \"y\" | \"z\",\n    f: (block: Block) => Block\n  ) {\n    return {\n      ...piece,\n      blocks: piece.blocks.map(f),\n      originalIndex: piece.originalIndex,\n      rotations: piece.rotations.concat(rotation)\n    };\n  }\n\n  function rotateX(piece: Piece) {\n    return rotateWithFunc(piece, \"x\", b => [b[0], -b[2], b[1]]);\n  }\n\n  function rotateY(piece: Piece) {\n    //return rotateWithFunc(piece, 0, 1, 0, b => [-b[2], b[1], b[0]]);\n    return rotateWithFunc(piece, \"y\", b => [b[2], b[1], -b[0]]);\n  }\n\n  function rotateZ(piece: Piece) {\n    //return rotateWithFunc(piece, 0, 0, 1, b => [b[1], -b[0], b[2]]);\n    return rotateWithFunc(piece, \"z\", b => [-b[1], b[0], b[2]]);\n  }\n\n  // makes piece blocks based on origo and sorts them always similarly\n  function canonize(piece: Piece) {\n    let minx = Number.MAX_VALUE,\n      miny = Number.MAX_VALUE,\n      minz = Number.MAX_VALUE;\n    piece.blocks.forEach(b => {\n      if (b[0] < minx) minx = b[0];\n      if (b[1] < miny) miny = b[1];\n      if (b[2] < minz) minz = b[2];\n    });\n    const result = {\n      ...piece,\n      blocks: piece.blocks.map(\n        b => [b[0] - minx, b[1] - miny, b[2] - minz] as [number, number, number]\n      ),\n      dX: piece.dX - minx,\n      dY: piece.dY - miny,\n      dZ: piece.dZ - minz\n    };\n    result.blocks.sort((a, b) => {\n      const dx = a[0] - b[0];\n      const dy = a[1] - b[1];\n      const dz = a[2] - b[2];\n      if (dx !== 0) return dx;\n      if (dy !== 0) return dy;\n      if (dz !== 0) return dz;\n      return 0;\n    });\n    return result;\n  }\n\n  function setAdd(permutation: Piece, permutations: Piece[]) {\n    for (let i = 0; i < permutations.length; i++) {\n      let match = true;\n      for (let j = 0; j < permutations[i].blocks.length; j++) {\n        const p1 = permutation.blocks[j];\n        const p2 = permutations[i].blocks[j];\n        match = match && p1[0] === p2[0] && p1[1] === p2[1] && p1[2] === p2[2];\n      }\n      if (match) return;\n    }\n    permutations.push(permutation);\n  }\n\n  function generatePermutations(pieces: Piece[]) {\n    const result = [];\n    for (let i = 0; i < pieces.length; i++) {\n      const curPermutations: Piece[] = [];\n      let piece = pieces[i];\n      for (let j = 0; j < 4; j++) {\n        for (let k = 0; k < 4; k++) {\n          for (let l = 0; l < 4; l++) {\n            setAdd(canonize(piece), curPermutations);\n            piece = rotateY(piece);\n          }\n          piece = rotateZ(piece);\n        }\n        piece = rotateX(piece);\n      }\n      result.push(curPermutations);\n    }\n    return result;\n  }\n\n  const rotatedPieces = generatePermutations(pieces);\n\n  function isFree(x: number, y: number, z: number) {\n    if (x < 0 || x >= width || y < 0 || y >= height || z < 0 || z >= depth)\n      return false;\n\n    return board[z * width * height + y * width + x] === 1;\n  }\n\n  function setFree(x: number, y: number, z: number, val: number) {\n    if (x < 0 || x >= width || y < 0 || y >= height || z < 0 || z >= depth)\n      throw new Error(\"out of bounds! \" + x + \", \" + y + \", \" + z);\n    board[z * width * height + y * width + x] = +val;\n  }\n\n  function canPlacePiece(x: number, y: number, z: number, piece: Piece) {\n    for (let i = 0; i < piece.blocks.length; i++) {\n      const b = piece.blocks[i];\n      if (!isFree(b[0] + x, b[1] + y, b[2] + z)) return false;\n    }\n    return true;\n  }\n\n  function placePiece(x: number, y: number, z: number, piece: Piece) {\n    piece.blocks.forEach(b => {\n      setFree(b[0] + x, b[1] + y, b[2] + z, 0);\n    });\n  }\n\n  function unplacePiece(x: number, y: number, z: number, piece: Piece) {\n    piece.blocks.forEach(b => {\n      setFree(b[0] + x, b[1] + y, b[2] + z, 1);\n    });\n  }\n\n  var colors = [\n    0xdf1f1f,\n    0xdfaf1f,\n    0x80df1f,\n    0x1fdf50,\n    0x1fdfdf,\n    0x1f4fdf,\n    0x7f1fdf,\n    0xdf1faf,\n    0xefefef,\n    0x303030\n  ];\n  const placedPieces: PlacedPiece[] = [];\n  function solveBoard(piecesLeft: Piece[][]): PlacedPiece[] | null {\n    if (piecesLeft.length === 0) {\n      console.log(\"Solved the board!\");\n      return _.cloneDeep(placedPieces);\n    }\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        for (let z = 0; z < depth; z++) {\n          for (let i = 0; i < piecesLeft[0].length; i++) {\n            const piece = piecesLeft[0][i];\n            if (canPlacePiece(x, y, z, piece)) {\n              placePiece(x, y, z, piece);\n              placedPieces.push([\n                x + piece.dX,\n                y + piece.dY,\n                z + piece.dZ,\n                piece\n              ]);\n              const res = solveBoard(piecesLeft.slice(1));\n              placedPieces.pop();\n              unplacePiece(x, y, z, piece);\n              if (res) return res;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  const result = solveBoard(rotatedPieces);\n  let realResult = null;\n\n  if (result) {\n    realResult = _.sortBy(result, placedPiece => {\n      const z = placedPiece[2] - placedPiece[3].dZ;\n      return (\n        _.sum(\n          placedPiece[3].blocks.map(block => {\n            return z + block[2];\n          })\n        ) / placedPiece[3].blocks.length\n      );\n    }).map(placedPiece => ({\n      x: placedPiece[0],\n      y: placedPiece[1],\n      z: placedPiece[2],\n      rotations: placedPiece[3].rotations,\n      originalIndex: placedPiece[3].originalIndex\n    }));\n  }\n\n  if (PROFILE) console.profileEnd();\n\n  console.log(\"solver ran in \" + (performance.now() - startTime) + \"ms\");\n  return realResult;\n  /*\n  // convert board to visualizer format\n  const vis_board = [];\n  for (let y = 0; y < height; y++) {\n    const row = [];\n    for (let x = 0; x < width; x++) {\n      row.push(board[y * width + x]);\n    }\n    vis_board.push(row);\n  }\n  //board = vis_board;\n  //pieces = vis_pieces;\n  */\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}