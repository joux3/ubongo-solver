{"version":3,"sources":["pieces.tsx","App.tsx","solver.tsx","index.tsx"],"names":["ThreeBSP","ThreeBSPConstructor","THREE","piece8","COLORS","PIECE_GROUPS","color","pieces","App","UbongoRenderer","id","React","Component","whiteMaterial","solidLineMaterial","boardLinesGeometry","vertices","push","boardBoxGeometry","pieceObjects","blockGeometry","computeBoundingBox","size","boundingBox","getSize","_","flatMap","group","map","piece","packedGeo","objectMaterial","roughness","pieceBSP","forEach","row","y","x","z","thisGeo","clone","translate","mesh","union","toMesh","material","receiveShadow","castShadow","userData","originalPiece","value","computePieceObjects","overlayContainer","document","getElementById","camera","window","innerWidth","innerHeight","scene","renderer","antialias","state","raycaster","mouse","lastHoverTarget","buttonCallback","boardGroup","selectedBoard","selectPiecesGroup","solveResult","solvePiecesGroup","controls","renderFrame","selectBoard","maxOpacity","children","obj","opacity","Math","max","updateMatrixWorld","i","floor","viewObj","translateX","translateY","translateZ","transparent","pieceIndex","add","numberInput","createElement","type","min","appendChild","widthHalf","heightHalf","screenPos","position","project","style","dataset","pieceJson","JSON","stringify","originalIndex","toString","left","round","top","scheduleFrame","selectPieces","querySelectorAll","input","curOpacity","Number","newOpacity","remove","Array","from","parentElement","removeChild","filter","c","yIndex","xIndex","maxLen","minOpacity","targetPos","solveStartPosition","sub","clampLength","length","rotateX","rotateY","OrbitControls","getElementsByTagName","target","setText","update","hasMoved","handledIndices","rotation","solvedPiece","finalState","finalPosition","targetRotation","steps","rotateOnWorldAxis","PI","calculateTotalRotation","rotations","toVector3","rotationVec","ANIM_SPEED","setFromVector3","render","setButton","isRayCastTarget","groupBy","values","sortBy","objArray","setFromCamera","intersects","intersectObjects","object","originalPieces","times","parseInt","constant","parse","flatBoard","flatten","t","console","log","solverPieces","result","depth","blocks","dX","dY","dZ","toSolverPiece","solverPiece","width","height","board","Error","startTime","performance","now","rotateWithFunc","f","concat","b","rotateZ","canonize","minx","MAX_VALUE","miny","minz","sort","a","dx","dy","dz","setAdd","permutation","permutations","match","j","p1","p2","rotatedPieces","curPermutations","k","l","generatePermutations","isFree","setFree","val","canPlacePiece","placePiece","unplacePiece","placedPieces","solveBoard","piecesLeft","cloneDeep","res","slice","pop","realResult","placedPiece","sum","block","solve","p","cloned","find","setHex","alert","lookAt","hasScheduled","requestAnimationFrame","scheduled","lastText","text","innerText","callback","button","visibility","this","shadowMap","enabled","setSize","body","domElement","addEventListener","ev","capture","clientX","clientY","selected","boardPiece","boardPieceTarget","light","set","shadow","mapSize","bias","near","radius","ambientLight","intensity","ReactDOM"],"mappings":"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","file":"static/js/main.ea0cb66b.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport * as THREE from \"three\";\nimport ThreeBSPConstructor from \"three-js-csg\";\n\nconst ThreeBSP = ThreeBSPConstructor(THREE);\n\nconst piece0 = [\n  [1, 1],\n  [0, 1]\n];\n\nconst piece1 = [\n  [2, 0],\n  [1, 1]\n];\n\nconst piece1_1 = [\n  [2, 1],\n  [0, 1]\n];\n\nconst piece2 = [\n  [1, 1],\n  [1, 0],\n  [1, 1]\n];\n\nconst piece3 = [\n  [1, 1, 1],\n  [0, 1, 0]\n];\n\nconst piece4 = [\n  [1, 1],\n  [0, 1],\n  [0, 2]\n];\n\nconst piece4Mirror = [\n  [1, 1],\n  [1, 0],\n  [2, 0]\n];\n\nconst piece7 = [\n  [2, 0, 0],\n  [1, 1, 1]\n];\n\nconst piece7Mirror = [\n  [1, 1, 1],\n  [2, 0, 0]\n];\n\nconst piece8 = [\n  [1, 1, 1],\n  [1, 0, 0]\n];\n\nconst piece9 = [\n  [0, 1, 1],\n  [1, 1, 1]\n];\n\nconst piece10 = [\n  [1, 1],\n  [1, 2]\n];\n\nconst piece11 = [\n  [1, 1, 0],\n  [0, 1, 1]\n];\n\nconst piece12 = [\n  [2, 1, 0],\n  [0, 1, 1]\n];\n\nconst piece12Mirror = [\n  [0, 1, 1],\n  [2, 1, 0]\n];\n\nconst piece13 = [\n  [0, 1, 0],\n  [2, 1, 1]\n];\n\nconst BLUE = 0x6892c1;\nconst YELLOW = 0xf1c148;\nconst RED = 0xea584c;\nconst GREEN = 0x7da442;\nexport const COLORS = [BLUE, YELLOW, RED, GREEN];\n\nconst RED_PIECES = [piece1, piece4, piece10, piece11];\nconst GREEN_PIECES = [piece8, piece3, piece7, piece8, piece12Mirror];\nconst BLUE_PIECES = [piece0, piece7Mirror, piece9, piece12];\nconst YELLOW_PIECES = [piece1_1, piece2, piece13, piece4Mirror];\n\nconst PIECE_GROUPS = [\n  { color: RED, pieces: RED_PIECES },\n  { color: YELLOW, pieces: YELLOW_PIECES },\n  { color: GREEN, pieces: GREEN_PIECES },\n  { color: BLUE, pieces: BLUE_PIECES }\n];\n\nexport function computePieceObjects(\n  blockGeometry: THREE.Geometry\n): THREE.Object3D[] {\n  blockGeometry.computeBoundingBox();\n  const size = new THREE.Vector3();\n  blockGeometry.boundingBox.getSize(size);\n  return _(PIECE_GROUPS)\n    .flatMap(group =>\n      group.pieces.map(piece => ({\n        packedGeo: piece,\n        color: group.color\n      }))\n    )\n    .map(({ packedGeo, color }) => {\n      const objectMaterial = new THREE.MeshStandardMaterial({\n        color,\n        roughness: 0.9\n      });\n      let pieceBSP: any = null;\n      packedGeo.forEach((row, y) => {\n        row.forEach((piece, x) => {\n          for (let z = 0; z < piece; z++) {\n            const thisGeo = blockGeometry.clone();\n            thisGeo.translate(x * size.x, y * size.y, z * size.z);\n            const mesh = new THREE.Mesh(thisGeo);\n            if (pieceBSP) {\n              pieceBSP = pieceBSP.union(new ThreeBSP(mesh));\n            } else {\n              pieceBSP = new ThreeBSP(mesh);\n            }\n          }\n        });\n      });\n      const mesh = pieceBSP.toMesh();\n      mesh.material = objectMaterial;\n      mesh.receiveShadow = true;\n      mesh.castShadow = true;\n      mesh.userData.originalPiece = packedGeo;\n\n      return mesh;\n    })\n    .value();\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport _ from \"lodash\";\nimport { computePieceObjects, COLORS } from \"./pieces\";\nimport { solve, SolvedPiece } from \"./solver\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    new UbongoRenderer();\n  }\n  render() {\n    return (\n      <div id=\"overlay-container\">\n        <div id=\"text-container\"></div>\n        <div id=\"button\"></div>\n      </div>\n    );\n  }\n}\n\nconst whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\nconst solidLineMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });\n\nconst boardLinesGeometry = new THREE.Geometry();\nboardLinesGeometry.vertices.push(new THREE.Vector3(0, 0, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0.1, 0, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0.1, 0.1, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0.0, 0.1, 0));\nboardLinesGeometry.vertices.push(new THREE.Vector3(0, 0, 0));\n\nconst boardBoxGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.001);\nconst blockGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);\nconst pieceObjects = computePieceObjects(blockGeometry);\n\nconst HOVER_OPACITY = 0.25;\nconst SELECTED_OPACITY = 0.8;\nconst PIECES_PER_ROW = 6;\nconst ANIM_SPEED = 0.025;\nconst ANIM_SPEED_MOVE = 0.01;\n\nclass UbongoRenderer {\n  private overlayContainer = document.getElementById(\"overlay-container\")!;\n  private camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    100\n  );\n  private scene = new THREE.Scene();\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private state = 1;\n  private raycaster = new THREE.Raycaster();\n  private mouse = new THREE.Vector2();\n  private lastHoverTarget: THREE.Object3D | null = null;\n  private buttonCallback = () => {};\n  private boardGroup = new THREE.Group();\n  private selectedBoard: boolean[][] = [];\n  private selectPiecesGroup = new THREE.Group();\n  private solveResult: SolvedPiece[] = [];\n  private solvePiecesGroup = new THREE.Group();\n  private controls: OrbitControls | null = null;\n  constructor() {\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.camera.position.z = 1;\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n    document.getElementById(\"button\")!.addEventListener(\"click\", () => {\n      this.buttonCallback();\n    });\n    window.document.addEventListener(\n      \"mousewheel\",\n      ev => {\n        this.scheduleFrame();\n      },\n      { capture: true }\n    );\n    window.document.addEventListener(\"mousemove\", ev => {\n      this.mouse.x = (ev.clientX / window.innerWidth) * 2 - 1;\n      this.mouse.y = -(ev.clientY / window.innerHeight) * 2 + 1;\n      this.scheduleFrame();\n    });\n    window.document.addEventListener(\"click\", () => {\n      const selected = this.lastHoverTarget as any;\n      if (!selected) {\n        return;\n      }\n      selected.material.opacity =\n        selected.material.opacity === SELECTED_OPACITY\n          ? HOVER_OPACITY\n          : SELECTED_OPACITY;\n      this.scheduleFrame();\n    });\n\n    for (let xIndex = 0; xIndex < 5; xIndex += 1) {\n      for (let yIndex = 0; yIndex < 5; yIndex += 1) {\n        const x = -0.2 + xIndex * 0.1;\n        const y = -0.2 + yIndex * 0.1;\n        const boardPiece = new THREE.Line(\n          boardLinesGeometry.clone(),\n          solidLineMaterial.clone()\n        );\n        boardPiece.position.x = x;\n        boardPiece.position.y = y;\n        (boardPiece as any).xIndex = xIndex;\n        (boardPiece as any).yIndex = yIndex;\n        (boardPiece as any).material.transparent = true;\n        this.boardGroup.add(boardPiece);\n        const boardPieceTarget = new THREE.Mesh(\n          boardBoxGeometry,\n          whiteMaterial.clone()\n        );\n        boardPieceTarget.position.x = x + 0.05;\n        boardPieceTarget.position.y = y + 0.05;\n        (boardPieceTarget as any).material.opacity = 0;\n        (boardPieceTarget as any).material.transparent = true;\n        (boardPieceTarget as any).isRayCastTarget = true;\n        this.boardGroup.add(boardPieceTarget);\n      }\n    }\n    this.scene.add(this.boardGroup);\n    const light = new THREE.PointLight(0xffffff, 1, 0, 1);\n    light.position.set(0, 0, 0.3);\n    light.castShadow = true;\n    light.shadow.mapSize.width = 1024;\n    light.shadow.mapSize.height = 1024;\n    light.shadow.bias = 0.00000000001;\n    light.shadow.camera.near = 0.01;\n    light.shadow.radius = 3;\n    this.scene.add(light);\n    const ambientLight = new THREE.AmbientLight();\n    ambientLight.intensity = 0.5;\n    this.scene.add(ambientLight);\n\n    this.renderFrame();\n  }\n  renderFrame = () => {\n    if (this.state === 1) {\n      this.selectBoard();\n    } else if (this.state === 2) {\n      let maxOpacity = 0;\n      this.boardGroup.children.forEach((obj: any) => {\n        obj.material.opacity = Math.max(obj.material.opacity - ANIM_SPEED, 0);\n        if (obj.material.opacity > maxOpacity) {\n          maxOpacity = obj.material.opacity;\n        }\n      });\n      if (maxOpacity === 0) {\n        this.state = 3;\n        this.camera.updateMatrixWorld();\n        pieceObjects.forEach((obj, i) => {\n          const x = i % PIECES_PER_ROW;\n          const y = Math.floor(i / PIECES_PER_ROW);\n          const viewObj = obj.clone();\n          viewObj.translateX((-2.8 + x) * 0.5);\n          viewObj.translateY(0.6 - y * 0.65);\n          viewObj.translateZ(-1);\n          viewObj.receiveShadow = true;\n          viewObj.castShadow = true;\n          (viewObj as any).material.transparent = true;\n          (viewObj as any).pieceIndex = i;\n          this.selectPiecesGroup.add(viewObj);\n\n          const numberInput = document.createElement(\"input\");\n          numberInput.type = \"number\";\n          numberInput.value = \"0\";\n          numberInput.min = \"0\";\n          this.overlayContainer.appendChild(numberInput);\n\n          const widthHalf = window.innerWidth / 2,\n            heightHalf = window.innerHeight / 2;\n          const screenPos = viewObj.position.clone();\n          screenPos.y -= 0.2;\n          screenPos.project(this.camera);\n          numberInput.style.opacity = \"1\";\n          numberInput.dataset.pieceJson = JSON.stringify(\n            viewObj.userData.originalPiece\n          );\n          numberInput.dataset.originalIndex = i.toString();\n          numberInput.style.left = `${Math.round(\n            screenPos.x * widthHalf + widthHalf\n          )}px`;\n          numberInput.style.top = `${Math.round(\n            -(screenPos.y * heightHalf) + heightHalf\n          )}px`;\n        });\n        this.scene.add(this.selectPiecesGroup);\n      }\n      this.scheduleFrame();\n    } else if (this.state === 3) {\n      this.selectPieces();\n    } else if (this.state === 4) {\n      let maxOpacity = 0;\n      document.querySelectorAll(\"input\").forEach(input => {\n        const curOpacity = Number(input.style.opacity!);\n        const newOpacity = Math.max(curOpacity - ANIM_SPEED, 0);\n        input.style.opacity = newOpacity.toString();\n        maxOpacity = Math.max(newOpacity, maxOpacity);\n      });\n      this.selectPiecesGroup.children.forEach((obj: any, i) => {\n        obj.material.opacity = Math.max(obj.material.opacity - ANIM_SPEED, 0);\n        maxOpacity = Math.max(obj.material.opacity, maxOpacity);\n      });\n      if (maxOpacity === 0) {\n        this.scene.remove(this.selectPiecesGroup);\n        Array.from(document.querySelectorAll(\"input\")).forEach(input => {\n          input.parentElement?.removeChild(input);\n        });\n\n        const childrenToRemove = this.boardGroup.children.filter(c => {\n          if (!(c instanceof THREE.Line)) {\n            return true;\n          }\n          return !this.selectedBoard[(c as any).yIndex][(c as any).xIndex];\n        });\n        childrenToRemove.forEach(c => {\n          this.boardGroup.remove(c);\n        });\n        this.boardGroup.translateZ(-0.6);\n        this.state = 5;\n      }\n      this.scheduleFrame();\n    } else if (this.state === 5) {\n      let maxLen = 0;\n      let minOpacity = 1;\n      this.solvePiecesGroup.children.forEach((obj, i) => {\n        const targetPos = solveStartPosition(i);\n        targetPos.sub(obj.position);\n        targetPos.clampLength(0, ANIM_SPEED_MOVE);\n        if (targetPos.length() > maxLen) {\n          maxLen = targetPos.length();\n        }\n        obj.position.add(targetPos);\n        obj.rotateX(0.005);\n        obj.rotateY(0.0025);\n      });\n      this.boardGroup.children.forEach((obj: any) => {\n        obj.material.opacity = Math.min(obj.material.opacity + ANIM_SPEED, 1);\n        if (obj.material.opacity < minOpacity) {\n          minOpacity = obj.material.minOpacity;\n        }\n      });\n      if (maxLen <= 0.001 && minOpacity === 1) {\n        this.controls = new OrbitControls(\n          this.camera,\n          document.getElementsByTagName(\"body\")[0]\n        );\n        this.controls.target = new THREE.Vector3(0, 0, -0.6);\n        this.state = 6;\n      }\n      this.scheduleFrame();\n    } else if (this.state === 6) {\n      this.setText(\n        \"3/3: Raahaa hiirtä liikuttaaksesi kameraa ja rullaa hiirtä zoomataksesi\"\n      );\n      this.controls?.update();\n      let hasMoved = false;\n      let handledIndices = 0;\n      this.solvePiecesGroup.children.forEach((obj, i) => {\n        if (hasMoved) {\n          obj.rotation.x += 0.005;\n          obj.rotation.y += 0.0025;\n          const targetPos = solveStartPosition(i - handledIndices);\n          targetPos.sub(obj.position);\n          targetPos.clampLength(0, ANIM_SPEED_MOVE);\n          if (targetPos.length() > 0.0001) {\n            obj.position.add(targetPos);\n          }\n        } else {\n          handledIndices += 1;\n          const solvedPiece = this.solveResult[i];\n          if (obj.userData.finalState === 0) {\n            obj.rotation.x += 0.005;\n            obj.rotation.y += 0.0025;\n            const targetPos = finalPosition(solvedPiece);\n            targetPos.z += 0.4;\n            targetPos.sub(obj.position);\n            targetPos.clampLength(0, ANIM_SPEED_MOVE);\n            if (targetPos.length() > 0.0001) {\n              obj.position.add(targetPos);\n              hasMoved = true;\n            } else {\n              obj.userData.finalState = 1;\n            }\n          }\n          if (obj.userData.finalState === 1) {\n            const targetRotation = calculateTotalRotation(\n              solvedPiece.rotations\n            ).toVector3();\n            const rotationVec = obj.rotation.toVector3();\n            targetRotation.sub(rotationVec);\n            targetRotation.clampLength(0, ANIM_SPEED * 2);\n            if (targetRotation.length() > 0.000001) {\n              rotationVec.add(targetRotation);\n              obj.rotation.setFromVector3(rotationVec);\n              hasMoved = true;\n            } else {\n              obj.userData.finalState = 2;\n            }\n          }\n          if (obj.userData.finalState === 2) {\n            const targetPos = finalPosition(solvedPiece);\n            targetPos.sub(obj.position);\n            targetPos.clampLength(0, ANIM_SPEED_MOVE);\n            if (targetPos.length() > 0.0001) {\n              obj.position.add(targetPos);\n              hasMoved = true;\n            } else {\n              obj.userData.finalState = 3;\n            }\n          }\n        }\n      });\n      /*this.camera.position.setX(this.mouse.x);\n      this.camera.position.setY(this.mouse.y);\n      this.camera.lookAt(new THREE.Vector3(0, 0, 0));*/\n      if (hasMoved) {\n        this.scheduleFrame();\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n  selectBoard = () => {\n    this.setText(\"1/3: Piirrä pelilauta\");\n    this.setButton(\"Jatka\", () => {\n      this.setButton(null, () => {});\n      this.state = 2;\n      this.selectedBoard = _(this.boardGroup.children)\n        .filter((obj: any) => obj.isRayCastTarget)\n        .groupBy(obj => obj.position.y)\n        .values()\n        .sortBy(objArray => objArray[0].position.y)\n        .map(objArray =>\n          _.sortBy(objArray, obj => obj.position.x).map(\n            (obj: any) => obj.material.opacity === SELECTED_OPACITY\n          )\n        )\n        .value();\n\n      this.scheduleFrame();\n    });\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(\n      this.boardGroup.children\n    );\n    this.boardGroup.children.forEach((object: any) => {\n      if (object.isRayCastTarget && object.material.opacity === HOVER_OPACITY) {\n        object.material.opacity = 0;\n      }\n    });\n    this.lastHoverTarget = null;\n    for (const intersect of intersects) {\n      const object = intersect.object as any;\n      if (object.isRayCastTarget) {\n        if (object.material.opacity !== SELECTED_OPACITY) {\n          object.material.opacity = HOVER_OPACITY;\n        }\n        this.lastHoverTarget = object;\n        break;\n      }\n    }\n  };\n  selectPieces = () => {\n    this.setText(\"2/3: Valitse palat\");\n    this.setButton(\"Ratkaise lauta\", () => {\n      this.setButton(null, () => {});\n      const originalPieces = _(document.querySelectorAll(\"input\"))\n        .flatMap(input =>\n          _.times(\n            parseInt(input.value, 10),\n            _.constant([\n              JSON.parse(input.dataset.pieceJson || \"\"),\n              parseInt(input.dataset.originalIndex || \"\", 10)\n            ])\n          )\n        )\n        .value();\n      const flatBoard = _.flatten(\n        this.selectedBoard.map(row => row.map(t => (t ? 1 : 0)))\n      );\n      console.log(\"-------flatboard\");\n      console.log(flatBoard);\n      const solverPieces = originalPieces.map(\n        ([originalPiece, originalIndex]) =>\n          toSolverPiece(originalPiece, originalIndex)\n      );\n      if (\n        flatBoard.filter(x => x).length * 2 !==\n        _(solverPieces)\n          .map(solverPiece => solverPiece.blocks)\n          .flatten()\n          .value().length\n      ) {\n        alert(\n          \"Please select correct pieces or confirm that the board is correct\"\n        );\n        return;\n      }\n      const solveResult = solve(5, 5, flatBoard, solverPieces);\n      if (!solveResult) {\n        alert(\"unable to solve, please check the pieces\");\n      } else {\n        console.log(solveResult);\n        solveResult.forEach((p, i) => {\n          const cloned: any = this.selectPiecesGroup.children\n            .find((c: any) => c.pieceIndex === p.originalIndex)!\n            .clone();\n          cloned.material = cloned.material.clone();\n          cloned.material.color.setHex(COLORS[i % COLORS.length]);\n          cloned.userData.finalState = 0;\n          this.solvePiecesGroup.add(cloned);\n        });\n        this.scene.add(this.solvePiecesGroup);\n        this.solveResult = solveResult;\n        this.state = 4;\n        this.setText(\"\");\n        this.scheduleFrame();\n      }\n    });\n    this.selectPiecesGroup.children.forEach(obj => {\n      obj.lookAt(\n        obj.position.x - this.mouse.x,\n        obj.position.y - this.mouse.y,\n        1\n      );\n      obj.rotation.z = 0;\n    });\n  };\n  private hasScheduled = false;\n  private scheduleFrame = () => {\n    if (this.hasScheduled) {\n      return;\n    }\n    this.hasScheduled = true;\n    requestAnimationFrame(this.scheduled);\n  };\n  private scheduled = () => {\n    this.hasScheduled = false;\n    this.renderFrame();\n  };\n\n  private lastText: string | null = null;\n  setText = (text: string) => {\n    if (text === this.lastText) {\n      return;\n    }\n    this.lastText = text;\n    document.getElementById(\"text-container\")!.innerText = text;\n  };\n  setButton = (text: string | null, callback: () => void) => {\n    const button = document.getElementById(\"button\")!;\n    if (text) {\n      button.innerText = text;\n      button.style.visibility = \"visible\";\n      this.buttonCallback = callback;\n    } else {\n      button.style.visibility = \"hidden\";\n    }\n  };\n}\n\nfunction toSolverPiece(piece: number[][], originalIndex: number) {\n  const result: [number, number, number][] = [];\n  piece.forEach((row, y) => {\n    row.forEach((depth, x) => {\n      for (let z = 0; z < depth; z++) {\n        result.push([x, y, z]);\n      }\n    });\n  });\n  console.log(\"-------\");\n  console.log(piece);\n  console.log(\"--->\");\n  console.log(result);\n  return {\n    blocks: result,\n    originalIndex,\n    rotations: [],\n    dX: 0,\n    dY: 0,\n    dZ: 0\n  };\n}\n\nfunction calculateTotalRotation(steps: (\"x\" | \"y\" | \"z\")[]) {\n  const obj = new THREE.Object3D();\n  steps.forEach(rotation => {\n    if (rotation === \"x\") {\n      obj.rotateOnWorldAxis(\n        new THREE.Vector3(1, 0, 0),\n        (90 / 360) * (2 * Math.PI)\n      );\n    } else if (rotation === \"y\") {\n      obj.rotateOnWorldAxis(\n        new THREE.Vector3(0, 1, 0),\n        (90 / 360) * (2 * Math.PI)\n      );\n    } else {\n      obj.rotateOnWorldAxis(\n        new THREE.Vector3(0, 0, 1),\n        (90 / 360) * (2 * Math.PI)\n      );\n    }\n  });\n  return obj.rotation;\n}\n\nfunction solveStartPosition(i: number) {\n  return new THREE.Vector3(-1, -0.6 * i, -0.4);\n}\n\nfunction finalPosition(solvedPiece: SolvedPiece) {\n  return new THREE.Vector3(\n    -0.15 + solvedPiece.x * 0.1,\n    -0.15 + solvedPiece.y * 0.1,\n    solvedPiece.z * 0.1 + 0.05 - 0.6\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\n\ntype Block = [number, number, number];\ntype Piece = {\n  blocks: Block[];\n  originalIndex: number;\n  rotations: (\"x\" | \"y\" | \"z\")[];\n  dX: number;\n  dY: number;\n  dZ: number;\n};\ntype PlacedPiece = [number, number, number, Piece];\nexport type SolvedPiece = {\n  x: number;\n  y: number;\n  z: number;\n  rotations: (\"x\" | \"y\" | \"z\")[];\n  originalIndex: number;\n};\n\nexport function solve(\n  width: number,\n  height: number,\n  board: number[],\n  pieces: Piece[]\n) {\n  if (width * height !== board.length) {\n    throw new Error(\"invalid board/width/heigh\");\n  }\n  const PROFILE = false;\n  const startTime = performance.now();\n  if (PROFILE) console.profile();\n\n  const depth = 2;\n  //const board = [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1];\n\n  /*const pieces: Piece[] = [\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0]\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 0],\n      [1, 0, 0],\n      [1, 0, 1]\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [1, 2, 0],\n      [0, 2, 0]\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 0],\n      [1, 0, 0],\n      [1, 1, 0],\n      [1, 0, 1]\n    ]\n  ];\nvar board = [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0];\nvar width = 4;\nvar height = 3;\nvar depth = 2;\nvar pieces = [[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 2, 0]],\n\t\t\t  [[0, 0, 1], [1, 0, 1], [1, 1, 1], [1, 2, 1], [1, 2, 0]],\n\t\t\t  [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]]];\nvar pieces = [[[0, 2, 1], [0, 2, 0], [1, 2, 0], [1, 1, 0], [1, 0, 0]],\n\t\t\t  [[0, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0], [1, 1, 0]],\n\t\t\t  [[0, 2, 0], [1, 2, 0], [1, 1, 0], [1, 0, 0]]];\n*/\n\n  // make the board 2 deep. why even bother reading depth...\n  board = board.concat(board);\n\n  function rotateWithFunc(\n    piece: Piece,\n    rotation: \"x\" | \"y\" | \"z\",\n    f: (block: Block) => Block\n  ) {\n    return {\n      ...piece,\n      blocks: piece.blocks.map(f),\n      originalIndex: piece.originalIndex,\n      rotations: piece.rotations.concat(rotation)\n    };\n  }\n\n  function rotateX(piece: Piece) {\n    return rotateWithFunc(piece, \"x\", b => [b[0], -b[2], b[1]]);\n  }\n\n  function rotateY(piece: Piece) {\n    //return rotateWithFunc(piece, 0, 1, 0, b => [-b[2], b[1], b[0]]);\n    return rotateWithFunc(piece, \"y\", b => [b[2], b[1], -b[0]]);\n  }\n\n  function rotateZ(piece: Piece) {\n    //return rotateWithFunc(piece, 0, 0, 1, b => [b[1], -b[0], b[2]]);\n    return rotateWithFunc(piece, \"z\", b => [-b[1], b[0], b[2]]);\n  }\n\n  // makes piece blocks based on origo and sorts them always similarly\n  function canonize(piece: Piece) {\n    let minx = Number.MAX_VALUE,\n      miny = Number.MAX_VALUE,\n      minz = Number.MAX_VALUE;\n    piece.blocks.forEach(b => {\n      if (b[0] < minx) minx = b[0];\n      if (b[1] < miny) miny = b[1];\n      if (b[2] < minz) minz = b[2];\n    });\n    const result = {\n      ...piece,\n      blocks: piece.blocks.map(\n        b => [b[0] - minx, b[1] - miny, b[2] - minz] as [number, number, number]\n      ),\n      dX: piece.dX - minx,\n      dY: piece.dY - miny,\n      dZ: piece.dZ - minz\n    };\n    result.blocks.sort((a, b) => {\n      const dx = a[0] - b[0];\n      const dy = a[1] - b[1];\n      const dz = a[2] - b[2];\n      if (dx !== 0) return dx;\n      if (dy !== 0) return dy;\n      if (dz !== 0) return dz;\n      return 0;\n    });\n    return result;\n  }\n\n  function setAdd(permutation: Piece, permutations: Piece[]) {\n    for (let i = 0; i < permutations.length; i++) {\n      let match = true;\n      for (let j = 0; j < permutations[i].blocks.length; j++) {\n        const p1 = permutation.blocks[j];\n        const p2 = permutations[i].blocks[j];\n        match = match && p1[0] === p2[0] && p1[1] === p2[1] && p1[2] === p2[2];\n      }\n      if (match) return;\n    }\n    permutations.push(permutation);\n  }\n\n  function generatePermutations(pieces: Piece[]) {\n    const result = [];\n    for (let i = 0; i < pieces.length; i++) {\n      const curPermutations: Piece[] = [];\n      let piece = pieces[i];\n      for (let j = 0; j < 4; j++) {\n        for (let k = 0; k < 4; k++) {\n          for (let l = 0; l < 4; l++) {\n            setAdd(canonize(piece), curPermutations);\n            piece = rotateY(piece);\n          }\n          piece = rotateZ(piece);\n        }\n        piece = rotateX(piece);\n      }\n      result.push(curPermutations);\n    }\n    return result;\n  }\n\n  const rotatedPieces = generatePermutations(pieces);\n\n  function isFree(x: number, y: number, z: number) {\n    if (x < 0 || x >= width || y < 0 || y >= height || z < 0 || z >= depth)\n      return false;\n\n    return board[z * width * height + y * width + x] === 1;\n  }\n\n  function setFree(x: number, y: number, z: number, val: number) {\n    if (x < 0 || x >= width || y < 0 || y >= height || z < 0 || z >= depth)\n      throw new Error(\"out of bounds! \" + x + \", \" + y + \", \" + z);\n    board[z * width * height + y * width + x] = +val;\n  }\n\n  function canPlacePiece(x: number, y: number, z: number, piece: Piece) {\n    for (let i = 0; i < piece.blocks.length; i++) {\n      const b = piece.blocks[i];\n      if (!isFree(b[0] + x, b[1] + y, b[2] + z)) return false;\n    }\n    return true;\n  }\n\n  function placePiece(x: number, y: number, z: number, piece: Piece) {\n    piece.blocks.forEach(b => {\n      setFree(b[0] + x, b[1] + y, b[2] + z, 0);\n    });\n  }\n\n  function unplacePiece(x: number, y: number, z: number, piece: Piece) {\n    piece.blocks.forEach(b => {\n      setFree(b[0] + x, b[1] + y, b[2] + z, 1);\n    });\n  }\n\n  const placedPieces: PlacedPiece[] = [];\n  function solveBoard(piecesLeft: Piece[][]): PlacedPiece[] | null {\n    if (piecesLeft.length === 0) {\n      console.log(\"Solved the board!\");\n      return _.cloneDeep(placedPieces);\n    }\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        for (let z = 0; z < depth; z++) {\n          for (let i = 0; i < piecesLeft[0].length; i++) {\n            const piece = piecesLeft[0][i];\n            if (canPlacePiece(x, y, z, piece)) {\n              placePiece(x, y, z, piece);\n              placedPieces.push([\n                x + piece.dX,\n                y + piece.dY,\n                z + piece.dZ,\n                piece\n              ]);\n              const res = solveBoard(piecesLeft.slice(1));\n              placedPieces.pop();\n              unplacePiece(x, y, z, piece);\n              if (res) return res;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  const result = solveBoard(rotatedPieces);\n  let realResult = null;\n\n  if (result) {\n    realResult = _.sortBy(result, placedPiece => {\n      const z = placedPiece[2] - placedPiece[3].dZ;\n      return (\n        _.sum(\n          placedPiece[3].blocks.map(block => {\n            return z + block[2];\n          })\n        ) / placedPiece[3].blocks.length\n      );\n    }).map(placedPiece => ({\n      x: placedPiece[0],\n      y: placedPiece[1],\n      z: placedPiece[2],\n      rotations: placedPiece[3].rotations,\n      originalIndex: placedPiece[3].originalIndex\n    }));\n  }\n\n  if (PROFILE) console.profileEnd();\n\n  console.log(\"solver ran in \" + (performance.now() - startTime) + \"ms\");\n  return realResult;\n  /*\n  // convert board to visualizer format\n  const vis_board = [];\n  for (let y = 0; y < height; y++) {\n    const row = [];\n    for (let x = 0; x < width; x++) {\n      row.push(board[y * width + x]);\n    }\n    vis_board.push(row);\n  }\n  //board = vis_board;\n  //pieces = vis_pieces;\n  */\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}